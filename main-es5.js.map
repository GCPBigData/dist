{"version":3,"sources":["webpack:///src/$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/chat/chat.component.ts","webpack:///src/app/chat/chat.component.html","webpack:///src/app/chat/chat.module.ts","webpack:///src/app/chat/dialog-user/dialog-user-type.ts","webpack:///src/app/chat/dialog-user/dialog-user.component.ts","webpack:///src/app/chat/dialog-user/dialog-user.component.html","webpack:///src/app/chat/shared/model/action.ts","webpack:///src/app/chat/shared/model/event.ts","webpack:///src/app/chat/shared/services/socket.service.ts","webpack:///src/app/shared/material/material.module.ts","webpack:///src/app/shared/shared.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts","webpack:///ws (ignored)"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","translate","setDefaultLang","use","language","selector","templateUrl","styleUrls","HttpLoaderFactory","http","AppModule","loader","provide","useFactory","deps","declarations","providers","bootstrap","AVATAR_URL","ChatComponent","socketService","dialog","action","messages","defaultDialogUserParams","disableClose","data","title","title_pt","dialogType","NEW","initModel","setTimeout","openUserPopup","matListItems","changes","subscribe","elements","scrollToBottom","matList","nativeElement","scrollTop","scrollHeight","err","randomId","getRandomId","user","avatar","initSocket","ioConnection","onMessage","message","push","onEvent","CONNECT","console","log","DISCONNECT","Math","floor","random","username","name","EDIT","params","dialogRef","open","afterClosed","paramsDialog","initIoConnection","sendNotification","JOINED","RENAME","send","from","content","messageContent","previousUsername","onClickUserInfo","sendMessage","switchLanguage","read","static","ChatModule","entryComponents","DialogUserType","DialogUserComponent","usernameFormControl","required","undefined","setValue","close","value","onSave","Action","Event","SERVER_URL","SocketService","socket","emit","observer","on","next","event","MaterialModule","SharedModule","environment","production","bootstrapModule","catch","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ChatComponent } from './chat/chat.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: ChatComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n\r\n  ngOnInit(): void {\r\n    this.translate.use('en');\r\n  }\r\n\r\n  private initModel(): void {\r\n  }\r\n\r\n  constructor(private translate: TranslateService) {\r\n    translate.setDefaultLang('en');\r\n  }\r\n\r\n  switchLanguage(language: string) {\r\n    this.translate.use(language);\r\n  }\r\n}\r\n","<mat-sidenav-container fullscreen>\r\n  <mat-sidenav #sidenav>\r\n    <mat-nav-list>\r\n      <a mat-list-item href=\"https://www.linkedin.com/in/jose-r-f-junior-b72b6b1a/\" target=\"_blank\">\r\n        <mat-icon mat-list-icon>person</mat-icon>\r\n        <span mat-line translate>Trocar de Puteiro</span>\r\n      </a>\r\n    </mat-nav-list>\r\n  </mat-sidenav>\r\n\r\n  <div>\r\n    <mat-toolbar color=\"primary\">\r\n      <button mat-icon-button (click)=\"sidenav.toggle()\">\r\n      <mat-icon>menu</mat-icon>\r\n    </button>\r\n      <span>Puta-666</span>\r\n    </mat-toolbar>\r\n\r\n    <div class=\"app-content\">\r\n      <router-outlet></router-outlet>\r\n    </div>\r\n  </div>\r\n</mat-sidenav-container>\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { ChatModule } from './chat/chat.module';\r\nimport { SharedModule } from './shared/shared.module';\r\n\r\n\r\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\r\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\r\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\r\n\r\nimport { MatMenuModule } from '@angular/material/menu';\r\n\r\nexport function HttpLoaderFactory(http: HttpClient) {\r\n  return new TranslateHttpLoader(http);\r\n}\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    AppRoutingModule,\r\n    ChatModule,\r\n    SharedModule,\r\n    HttpClientModule,\r\n    MatMenuModule,\r\n    TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: HttpLoaderFactory,\r\n        deps: [HttpClient]\r\n      }\r\n    })\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit, ViewChildren, ViewChild, AfterViewInit, QueryList, ElementRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatList, MatListItem } from '@angular/material/list';\r\n\r\nimport { Action } from './shared/model/action';\r\nimport { Event } from './shared/model/event';\r\nimport { Message } from './shared/model/message';\r\nimport { User } from './shared/model/user';\r\nimport { SocketService } from './shared/services/socket.service';\r\nimport { DialogUserComponent } from './dialog-user/dialog-user.component';\r\nimport { DialogUserType } from './dialog-user/dialog-user-type';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n\r\nconst AVATAR_URL = 'https://api.adorable.io/avatars/285';\r\n\r\n@Component({\r\n  selector: 'app-chat',\r\n  templateUrl: './chat.component.html',\r\n  styleUrls: ['./chat.component.css']\r\n})\r\nexport class ChatComponent implements OnInit, AfterViewInit {\r\n  action = Action;\r\n  user: User;\r\n  messages: Message[] = [];\r\n  messageContent: string;\r\n  ioConnection: any;\r\n  dialogRef: MatDialogRef<DialogUserComponent> | null;\r\n  defaultDialogUserParams: any = {\r\n    disableClose: true,\r\n    data: {\r\n      title: 'Welcome',\r\n      title_pt: 'Bem-vindo',\r\n      dialogType: DialogUserType.NEW\r\n    }\r\n  };\r\n\r\n  // getting a reference to the overall list, which is the parent container of the list items\r\n  @ViewChild(MatList, { read: ElementRef, static: true }) matList: ElementRef;\r\n\r\n  // getting a reference to the items/messages within the list\r\n  @ViewChildren(MatListItem, { read: ElementRef }) matListItems: QueryList<MatListItem>;\r\n\r\n  constructor(private socketService: SocketService,\r\n              public dialog: MatDialog, private translate: TranslateService) {\r\n      translate.setDefaultLang('en');\r\n    }\r\n\r\n  ngOnInit(): void {\r\n    this.initModel();\r\n    setTimeout(() => {\r\n      this.openUserPopup(this.defaultDialogUserParams);\r\n    }, 0);\r\n  }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.matListItems.changes.subscribe(elements => {\r\n        this.scrollToBottom();\r\n      });\r\n    }\r\n\r\n    private scrollToBottom(): void {\r\n      try {\r\n        this.matList.nativeElement.scrollTop = this.matList.nativeElement.scrollHeight;\r\n      } catch (err) {\r\n      }\r\n    }\r\n\r\n    private initModel(): void {\r\n      const randomId = this.getRandomId();\r\n      this.user = {\r\n        id: randomId,\r\n        avatar: `${AVATAR_URL}/${randomId}.png`\r\n      };\r\n    }\r\n\r\n    private initIoConnection(): void {\r\n      this.socketService.initSocket();\r\n\r\n      this.ioConnection = this.socketService.onMessage()\r\n        .subscribe((message: Message) => {\r\n          this.messages.push(message);\r\n        });\r\n\r\n\r\n      this.socketService.onEvent(Event.CONNECT)\r\n        .subscribe(() => {\r\n          console.log('connected');\r\n        });\r\n\r\n      this.socketService.onEvent(Event.DISCONNECT)\r\n        .subscribe(() => {\r\n          console.log('disconnected');\r\n        });\r\n    }\r\n\r\n    private getRandomId(): number {\r\n      return Math.floor(Math.random() * (1000000)) + 1;\r\n    }\r\n\r\n    public onClickUserInfo() {\r\n      this.openUserPopup({\r\n        data: {\r\n          username: this.user.name,\r\n          title: 'Edit Details',\r\n          title_pt: 'Alterar',\r\n          dialogType: DialogUserType.EDIT\r\n        }\r\n      });\r\n    }\r\n\r\n    private openUserPopup(params): void {\r\n      this.dialogRef = this.dialog.open(DialogUserComponent, params);\r\n      this.dialogRef.afterClosed().subscribe(paramsDialog => {\r\n        if (!paramsDialog) {\r\n          return;\r\n        }\r\n\r\n        this.user.name = paramsDialog.username;\r\n        if (paramsDialog.dialogType === DialogUserType.NEW) {\r\n          this.initIoConnection();\r\n          this.sendNotification(paramsDialog, Action.JOINED);\r\n        } else if (paramsDialog.dialogType === DialogUserType.EDIT) {\r\n          this.sendNotification(paramsDialog, Action.RENAME);\r\n        }\r\n      });\r\n    }\r\n\r\n    public sendMessage(message: string): void {\r\n      if (!message) {\r\n        return;\r\n      }\r\n\r\n      this.socketService.send({\r\n        from: this.user,\r\n        content: message\r\n      });\r\n      this.messageContent = null;\r\n    }\r\n\r\n    public sendNotification(params: any, action: Action): void {\r\n      let message: Message;\r\n\r\n      if (action === Action.JOINED) {\r\n        message = {\r\n          from: this.user,\r\n          action\r\n        };\r\n      } else if (action === Action.RENAME) {\r\n        message = {\r\n          action,\r\n          content: {\r\n            username: this.user.name,\r\n            previousUsername: params.previousUsername\r\n          }\r\n        };\r\n      }\r\n\r\n      this.socketService.send(message);\r\n    }\r\n\r\n    switchLanguage(language: string) {\r\n      this.translate.use(language);\r\n    }\r\n\r\n}\r\n","<button mat-fab (click)=\"onClickUserInfo()\">\r\n  <mat-icon>person</mat-icon>\r\n</button>\r\n<div class=\"chat-container\">\r\n  <mat-card class=\"main-card\">\r\n    <mat-list class=\"chat-list\">\r\n      <mat-list-item *ngFor=\"let message of messages\" [ngClass]=\"[(message.action === undefined && message.from.id === user.id)? 'chat-list-item': '']\">\r\n        <img mat-list-avatar *ngIf=\"message.action === undefined\" [src]=\"message.from.avatar\">\r\n        <h4 mat-line *ngIf=\"message.action === undefined\">\r\n          <b>{{message.from.name}}</b>\r\n        </h4>\r\n        <p mat-line *ngIf=\"message.action === undefined\">\r\n          <span> {{message.content}} </span>\r\n        </p>\r\n        <p mat-line *ngIf=\"message.action === action.JOINED\" class=\"chat-notification\">\r\n          <span translate> <b>{{message.from.name}}</b> joined to the conversation. </span>\r\n        </p>\r\n        <p mat-line *ngIf=\"message.action === action.RENAME\" class=\"chat-notification\">\r\n          <span translate> <b>{{message.content.previousUsername}}</b> is now <b>{{message.content.username}}</b> </span>\r\n        </p>\r\n      </mat-list-item>\r\n    </mat-list>\r\n    <div class=\"chat-footer-container\">\r\n      <mat-icon>message</mat-icon>\r\n      <mat-form-field class=\"chat-input\">\r\n        <input matInput\r\n               #inputMessage\r\n               maxlength=\"140\"\r\n               placeholder=\"{{'Type your message' | translate}}\"\r\n               [(ngModel)]=\"messageContent\"\r\n               (keyup.enter)=\"sendMessage(messageContent)\">\r\n        <mat-hint align=\"end\">{{inputMessage.value.length}}/140</mat-hint>\r\n      </mat-form-field>\r\n    </div>\r\n    <button mat-icon-button [matMenuTriggerFor]=\"menu\" class=\"button-globe\">\r\n      <mat-icon>language</mat-icon>\r\n    </button>\r\n    <mat-menu #menu=\"matMenu\">\r\n      <button mat-menu-item (click)=\"switchLanguage('en')\"><img alt=\"flag\" src=\"../../../assets/flags/en.png\"> English</button>\r\n      <button mat-menu-item (click)=\"switchLanguage('pt')\"><img alt=\"flag\" src=\"../../../assets/flags/pt.png\"> Português</button>\r\n    </mat-menu>\r\n  </mat-card>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { MaterialModule } from '../shared/material/material.module';\r\n\r\nimport { ChatComponent } from './chat.component';\r\nimport { SocketService } from './shared/services/socket.service';\r\nimport { DialogUserComponent } from './dialog-user/dialog-user.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MaterialModule\r\n  ],\r\n  declarations: [ChatComponent, DialogUserComponent],\r\n  providers: [SocketService],\r\n  entryComponents: [DialogUserComponent]\r\n})\r\nexport class ChatModule { }\r\n","export enum DialogUserType {\r\n    NEW,\r\n    EDIT\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { FormControl, Validators } from '@angular/forms';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n@Component({\r\n  selector: 'app-dialog-user',\r\n  templateUrl: './dialog-user.component.html',\r\n  styleUrls: ['./dialog-user.component.css']\r\n})\r\nexport class DialogUserComponent implements OnInit {\r\n  usernameFormControl = new FormControl('', [Validators.required]);\r\n  previousUsername: string;\r\n\r\n  constructor(public dialogRef: MatDialogRef<DialogUserComponent>,\r\n              @Inject(MAT_DIALOG_DATA) public params: any,\r\n              private translate: TranslateService) {\r\n    this.previousUsername = params.username ? params.username : undefined;\r\n    this.usernameFormControl.setValue(params.username);\r\n    translate.setDefaultLang('en');\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  public onSave(): void {\r\n    this.dialogRef.close({\r\n      username: this.usernameFormControl.value,\r\n      dialogType: this.params.dialogType,\r\n      previousUsername: this.previousUsername\r\n    });\r\n  }\r\n\r\n  switchLanguage(language: string) {\r\n    this.translate.use(language);\r\n  }\r\n\r\n}\r\n","<div class=\"row\">\r\n<h2 class=\"dialog-title\" mat-dialog-title>{{ 'Dialog Title' | translate:params }}</h2>\r\n\r\n<button mat-icon-button mat-dialog-title [matMenuTriggerFor]=\"menu\" class=\"button-globe\" tabindex=\"-1\">\r\n  <mat-icon>language</mat-icon>\r\n</button>\r\n<mat-menu #menu=\"matMenu\">\r\n  <button mat-menu-item (click)=\"switchLanguage('en')\"><img alt=\"flag\" src=\"../../../assets/flags/en.png\"> English</button>\r\n  <button mat-menu-item (click)=\"switchLanguage('pt')\"><img alt=\"flag\" src=\"../../../assets/flags/pt.png\"> Português</button>\r\n</mat-menu>\r\n</div>\r\n\r\n<mat-dialog-content class=\"dialog-content\">\r\n  <mat-form-field>\r\n    <input matInput name=\"username\" placeholder=\"{{'Username' | translate}}\"\r\n          (keyup.enter)=\"onSave()\" [formControl]=\"usernameFormControl\" required>\r\n    <mat-error translate>FieldRequired</mat-error>\r\n    <mat-hint translate>Please type your username</mat-hint>\r\n  </mat-form-field>\r\n</mat-dialog-content>\r\n\r\n<mat-dialog-actions *ngIf=\"params?.typeDialog === 'new-user'\" [attr.align]=\"'end'\">\r\n  <button mat-raised-button color=\"primary\" mat-dialog-close (click)=\"onSave()\" [disabled]=\"usernameFormControl.hasError('required')\">Chat!</button>\r\n</mat-dialog-actions>\r\n\r\n<mat-dialog-actions *ngIf=\"params?.typeDialog === 'edit-user'\" [attr.align]=\"'end'\">\r\n  <button mat-button mat-dialog-close color=\"secondary\">Close</button>\r\n  <button mat-raised-button color=\"primary\" mat-dialog-close (click)=\"onSave()\">Save</button>\r\n</mat-dialog-actions>\r\n","export enum Action {\r\n    JOINED,\r\n    LEFT,\r\n    RENAME\r\n}\r\n","export enum Event {\r\n    CONNECT = 'connect',\r\n    DISCONNECT = 'disconnect'\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Observer } from 'rxjs';\r\nimport { Message } from '../model/message';\r\nimport { Event } from '../model/event';\r\n\r\nimport * as socketIo from 'socket.io-client';\r\nimport {printLine} from 'tslint/lib/verify/lines';\r\n\r\n/*const SERVER_URL = 'localhost:8080';*/\r\nconst SERVER_URL = '191.252.204.57:8080';\r\n\r\n@Injectable()\r\nexport class SocketService {\r\n    private socket;\r\n\r\n    public initSocket(): void {\r\n      printLine('===========1===========');\r\n        this.socket = socketIo(SERVER_URL);\r\n    }\r\n\r\n    public send(message: Message): void {\r\n      printLine('===========2===========');\r\n        this.socket.emit('message', message);\r\n    }\r\n\r\n    public onMessage(): Observable<Message> {\r\n        return new Observable<Message>(observer => {\r\n            this.socket.on('message', (data: Message) => observer.next(data));\r\n        });\r\n    }\r\n\r\n    public onEvent(event: Event): Observable<any> {\r\n      printLine('===========3===========');\r\n        return new Observable<Event>(observer => {\r\n            this.socket.on(event, () => observer.next());\r\n        });\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatDialogModule,\r\n    MatIconModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatSidenavModule,\r\n    MatToolbarModule,\r\n    TranslateModule,\r\n    MatMenuModule\r\n  ],\r\n  exports: [\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatDialogModule,\r\n    MatIconModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatSidenavModule,\r\n    MatToolbarModule,\r\n    TranslateModule,\r\n    MatMenuModule\r\n  ],\r\n  declarations: [],\r\n  providers: [\r\n    MatDialog\r\n  ]\r\n})\r\nexport class MaterialModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MaterialModule } from './material/material.module';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MaterialModule,\r\n    TranslateModule\r\n  ],\r\n  exports: [\r\n    MaterialModule,\r\n    TranslateModule\r\n  ],\r\n  declarations: []\r\n})\r\nexport class SharedModule { }\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","/* (ignored) */"]}